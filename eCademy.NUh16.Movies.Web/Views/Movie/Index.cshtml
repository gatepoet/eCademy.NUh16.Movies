@model MovieListViewModel
@{
    ViewBag.Title = "Index";
    var ko = Html.CreateKnockoutContext();
}

<h2>Index <span data-bind="text: todayFormatted"></span></h2>
@if (!string.IsNullOrWhiteSpace(Model.Search))
{
    <span>Found @Model.Movies.Length movies.</span>
}

<form id="search-form" data-bind="submit: search">
    <input type="search" name="search" data-bind="value: searchText" />
    <input type="submit" value="Search!" />
    <span id="search-loader" data-bind="if: searchPending">
        <img src="@Url.Content("~/Content/ajax-loader.gif")" />
    </span>
</form>

@if (Request.IsAuthenticated)
{
    using (Html.BeginInlineForm("Create", "Movie"))
    {
        @Html.AntiForgeryToken()
        @Html.LabelFor(m => m.NewMovie.Title)
        @Html.EditorFor(m => m.NewMovie.Title)
        @Html.LabelFor(m => m.NewMovie.Year)
        @Html.EditorFor(m => m.NewMovie.Year)
        @Html.LabelFor(m => m.NewMovie.ImageUrl)
        @Html.EditorFor(m => m.NewMovie.ImageUrl)
        <input type="submit" value="Add!" />
    }
}

<div id="search-result">
    <ul class="image-list">
        @using (var movies = ko.Foreach(m => m.Movies))
        {
            <li class="image-list-item row">
                <div class="col-sm-6">
                    <img @movies.Bind.Attr("src", m => m.ImageUrl) class="image-list-item-image" />
                    @movies.Html.Span(m => m.Title)
                    (@movies.Html.Span(m => m.Year))
                    -
                    @using (var genre = movies.With(m => m.Genre))
                    {
                        @genre.Html.Span(g => g.Name)
                    }
                </div>

                <div class="col-sm-6">
                    <a data-bind="attr: { href: $root.getEditLink(Id) }">Edit</a> |
                    <a href="" data-bind="click: $root.showDetails">Details</a> |
                    <a data-bind="attr: { href: $root.getDeleteLink(Id) }">Delete</a>
                </div>
            </li>
        }
    </ul>
</div>
<div id="details" data-bind="with: selectedMovie">
    <div class="row">
        <dl class="dl-horizontal col-md-6">
            <dt>
                Title
            </dt>
            <dd>
                <span data-bind="text: Title"></span>
            </dd>
            <dt>
                Year
            </dt>
            <dd>
                <span data-bind="text: Year"></span>
            </dd>
        </dl>
        <br />
        <img data-bind="attr: { src: ImageUrl }" class="col-md-6 movie-details-image" />
    </div>
</div>

@section scripts {
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/unobtrusiveajax")
    @Scripts.Render("~/bundles/moment")
    <script>
        moment.locale('nb');
        var editUrlBase = '@Url.Action("Edit", new { id = "[id]" })';
        var deleteUrlBase = '@Url.Action("Delete", new { id = "[id]" })';
        var viewModel = {
            Movies: ko.observableArray(),
            selectedMovie: ko.observable(),
            getEditLink: function (id) {
                return editUrlBase.replace('[id]', ko.unwrap(id));
            },
            getDeleteLink: function (id) {
                return deleteUrlBase.replace('[id]', ko.unwrap(id));
            },
            searchText: ko.observable(''),
            searchPending: ko.observable(false),
            today: ko.observable(new Date()),
        };
        viewModel.showDetails = function (movie) {
            viewModel.selectedMovie(movie);
        };
        viewModel.todayFormatted = ko.computed(function () {
            console.log(moment.locale());
            return moment(viewModel.today()).format('dddd');
        });
        viewModel.search = function () {
            viewModel.Movies([]);
            viewModel.searchPending(true);
            return $.get('/api/movies/?q=' + viewModel.searchText())
                .then(function (result) {
                    var movies = ko.mapping.fromJS(result)();
                    viewModel.Movies(movies);
                    viewModel.searchPending(false);
                });
        }

        ko.applyBindings(viewModel);

        viewModel.search();

        function onSearchFailed(err) {
            var message = 'Error searching for movie';
            console.error(message, err);
            alert(message);
        }
        function onSearchSuccess(data) {
            console.log(data);
        }
    </script>
}