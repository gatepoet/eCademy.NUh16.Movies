@model MovieListViewModel
@{
    ViewBag.Title = "Index";
    var ko = Html.CreateKnockoutContext();
}

<h2>Index</h2>
@if (!string.IsNullOrWhiteSpace(Model.Search))
{
    <span>Found @Model.Movies.Length movies.</span>
}

@using (Ajax.BeginForm("Search", new AjaxOptions
{
    InsertionMode = InsertionMode.Replace,
    HttpMethod = "GET",
    OnFailure = "onSearchFailed",
    OnSuccess = "onSearchSuccess",
    LoadingElementId = "loader",
    UpdateTargetId = "search-result"   
}))
{
    <input type="search" name="search" />
    <input type="submit" value="Search!" />
    <span id="loader" style="display:none;">
        <img src="@Url.Content("~/Content/ajax-loader.gif")" />
    </span>
}

@if (Request.IsAuthenticated)
{
    using (Html.BeginInlineForm("Create", "Movie"))
    {
        @Html.AntiForgeryToken()
        @Html.LabelFor(m => m.NewMovie.Title)
        @Html.EditorFor(m => m.NewMovie.Title)
        @Html.LabelFor(m => m.NewMovie.Year)
        @Html.EditorFor(m => m.NewMovie.Year)
        @Html.LabelFor(m => m.NewMovie.ImageUrl)
        @Html.EditorFor(m => m.NewMovie.ImageUrl)
        <input type="submit" value="Add!" />
    }
}

<div id="search-result">
    <ul class="image-list">
    @using (var movies = ko.Foreach(m => m.Movies))
    {
        <li class="image-list-item">
            <div class="left">
                <img @movies.Bind.Attr("src", m => m.ImageUrl) class="image-list-item-image" />
                @movies.Html.Span(m => m.Title)
                (@movies.Html.Span(m => m.Year))
                -
                @using (var genre = movies.With(m => m.Genre))
                {
                    @genre.Html.Span(g => g.Name)
                }
                </div>

                <div class="right">
                @*@Ajax.ActionLink("Edit", "Edit", new { id = movie.Id },
                    new AjaxOptions
                    {
                        UpdateTargetId = "details"
                    })) |
                        @Ajax.ActionLink("Details", "Details", new { id = movie.Id },
                    new AjaxOptions
                    {
                        UpdateTargetId = "details"
                    })
                        @Html.ActionLink("Delete", "Delete", new { id = movie.Id })*@
            </div>
        </li>
        }
    </ul>
</div>
<div id="details"></div>

@section scripts {
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/unobtrusiveajax")
    <script>
        var viewModel = {
            Movies: ko.observableArray(),
        };

        ko.applyBindings(viewModel);

        $.getJSON('/api/movies')
            .then(function (result) {
                var movies = ko.mapping.fromJS(result)();
                for (var i = 0; i < movies.length; i++) {
                    viewModel.Movies.push(movies[i]);
                }
            });

        function onSearchFailed(err) {
            var message = 'Error searching for movie';
            console.error(message, err);
            alert(message);
        }
        function onSearchSuccess(data) {
            console.log(data);
        }
    </script>
}